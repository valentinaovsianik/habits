name: Django CI

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies and flake8
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt flake8

      - name: Run flake8
        run: flake8 --exclude=migrations,__pycache__

  tests:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Create .env file for tests
        run: |
          echo "${{ secrets.DOTENV }}" | sed '/^#/d;/^$/d' > .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: Run tests
        run: |
          python manage.py test --verbosity 2

  build:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Log in Docker Hub
        run: echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }} .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
            
            echo "Stopping and removing old container..."
            docker stop myapp || true
            docker rm myapp || true
            
            echo "Starting new container..."
            docker run -d --name myapp -p 8080:8000 \
              --env-file /path/to/.env \
              -v /path/to/static:/app/static \
              ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
            
            echo "Applying migrations..."
            docker exec myapp python manage.py migrate --noinput
            
            echo "Collecting static files..."
            docker exec myapp python manage.py collectstatic --noinput
            
            echo "Cleaning up old images..."
            docker image prune -f
